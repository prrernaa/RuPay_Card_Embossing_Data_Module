package com.card.controller;

import java.awt.Font;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.InvalidPathException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.nio.file.StandardOpenOption;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.poi.common.usermodel.HyperlinkType;
import org.apache.poi.ss.usermodel.ClientAnchor;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.Drawing;
import org.apache.poi.ss.usermodel.Hyperlink;
import org.apache.poi.ss.usermodel.Picture;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ContentDisposition;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.card.dto.InputFileDto;
import com.card.entity.WorkOrder;
import com.card.repo.WorkOrderRepo;
import com.card.service.InputFileProcessingService;
import com.card.service.OutputFileGeneratorService;
//import com.card.service.PdfGeneratorService;
import com.card.service.PdfGenerator;
import com.card.service.WorkOrderService;

import net.sourceforge.barbecue.Barcode;
import net.sourceforge.barbecue.BarcodeFactory;
import net.sourceforge.barbecue.BarcodeImageHandler;
@Controller

public class CardController {

	
//	private static final String UPLOAD_DIR = "../uploads";
//    private static final String PROCESSED_DIR = "../processed";
    
    private static final String UPLOAD_DIR = "/uploads";
    private static final String PROCESSED_DIR = "/processed";
    Logger logger = LoggerFactory.getLogger(CardController.class);
    
 // ArrayList to store processed strings
    private List<String> processedStrings = null;
    
    
    @Autowired
	private OutputFileGeneratorService outputFileGeneratorService;
    
	
	@Autowired
	private InputFileProcessingService inputFileProcessingService;
	
	@Autowired
	private WorkOrderRepo workOrderRepo;
	
	
//    @GetMapping("/")
//    public String home(Model model) {
//    	logger.info("Home Page called");
//    	logger.debug("Debug message");
//    	logger.error("error message");
//    	
//    	//return "redirect:/upload";
//        return "redirect:/login";
//    }
    
    @GetMapping("/upload")
    public String showUploadForm(Model model) {
        return "upload";
    }
    
    @Autowired
    private WorkOrderRepo repo;
    
    @Autowired
    private PdfGenerator pdfGenerator;
       
    @GetMapping("/form")
    public String showCardForm(Model model) {
        return "form";
    }
    
    @Autowired
    private WorkOrderService workOrderService;
    
    @PostMapping("/submitForm")
    public ResponseEntity<byte[]> submitForm(@ModelAttribute WorkOrder workOrderData, HttpSession session) throws IOException {
        System.out.println(workOrderData);

        // Save the form data
        //repo.save(workOrderData);
       workOrderService.create(workOrderData);
        logger.info(":::::::::::::Data Saved succesfully");
        
		// Generate PDF
        byte[] pdfBytes = pdfGenerator.generatePdf(workOrderData);
        logger.info(":::::::::::::File generated byte array length" + pdfBytes.length);
        
        LocalDateTime dateform= LocalDateTime.now();
    	DateTimeFormatter formatter = DateTimeFormatter.ofPattern("ddMMyy hhmm");
    	
    	String date = dateform.format(formatter);
        
        // Serve PDF as response
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_PDF);
        headers.setContentDispositionFormData("filename", workOrderData.getPolfNum()+" "+ date +".pdf");
        headers.setContentLength(pdfBytes.length);

        // Clear session after form submission
        session.setAttribute("message", "Form Submitted Successfully");

        return new ResponseEntity<>(pdfBytes, headers, HttpStatus.OK);
    }


    
    
	 @PostMapping("/uploadFile")
	    public ResponseEntity<?> handleFileUpload(@RequestParam("file") MultipartFile file, RedirectAttributes redirectAttributes) {
	        try {
	        	
	        	List<List<String >> exceldata 
	            = new ArrayList<List<String> >();
	            List<List<String >> packagingList 
	            = new ArrayList<List<String> >();
	            
	         // Creating directories for upload and processed files
	            Path uploadPath = Paths.get(UPLOAD_DIR);
	            Path processedPath = Paths.get(PROCESSED_DIR);

	            Files.createDirectories(uploadPath);
	            Files.createDirectories(processedPath);

	            // Saving the uploaded file
	            Path filePath = uploadPath.resolve(file.getOriginalFilename());
	            Files.copy(file.getInputStream(), filePath, StandardCopyOption.REPLACE_EXISTING);
	            
	            LocalDateTime dateform= LocalDateTime.now();
	        	DateTimeFormatter formatter = DateTimeFormatter.ofPattern("ddMMyy hhmm");
	        	
	        	String date = dateform.format(formatter);
	            
	            // Perform processing here if needed
	            // Process each line and add to the ArrayList
	            processedStrings = new ArrayList<String>();
	            processedStrings =    processFile(filePath,processedStrings);
	            
		        if(processedStrings.size()>0) 
		        {		     
		            Files.createDirectories(processedPath);
		            
		            String textoutputFile = "Text File Output "+ date +".txt";
		            // Append the output string to the file
		            Path outputFile = processedPath.resolve(textoutputFile);
		            Files.deleteIfExists(outputFile);

		            // Create a new file
		            Files.createFile(outputFile);
		            String welcomeMailerExcel = "Welcome Mailer Excel "+ date +".xlsx";
		            //Excel Sheet Mailer
		            Path excelFile=processedPath.resolve(welcomeMailerExcel);
			        Files.deleteIfExists(excelFile);

		            // Create a new file
		            Files.createFile(excelFile);
		            String cardPackagingList="Card Packing List "+ date +".xlsx";
		            // Excel Sheet Card Packaging List
		            Path cardPackage=processedPath.resolve(cardPackagingList);
			        Files.deleteIfExists(cardPackage);

		            // Create a new file
		            Files.createFile(cardPackage);
		            
		            for(String inputString: processedStrings)
			        {	
		            	
		            	// Barcode generation for Card Reference Number
		            	String crnBarcode39=inputString.substring(282, 295);
			        	Path crnBarcode39Path=processedPath.resolve(crnBarcode39+".png");
			        	try{
			        		generateCode39BarcodeImage(crnBarcode39, crnBarcode39Path);
			        		
			        	}
			        	catch(Exception e)
			        	{
			        		e.printStackTrace();
			        		String errorMessage = "exception in barcode:"+crnBarcode39Path;
			        	    redirectAttributes.addFlashAttribute("message", errorMessage);
			        		
			        	}
			        	
			        	// Barcode generation for Courier Shipment ID
			        	String barcode39CSI=inputString.substring(298, 307);
			        	Path barcode39PathCSI=processedPath.resolve(barcode39CSI+".png");
			        	try{
			        		generateCode39BarcodeImage(barcode39CSI, barcode39PathCSI);
			        		
			        	}
			        	catch(Exception e)
			        	{
			        		e.printStackTrace();
			        		String errorMessage = "exception in barcode:"+barcode39CSI;
			        	    redirectAttributes.addFlashAttribute("message", errorMessage);
			        		
			        	}
			        	
			        	
			        	// Barcode generation for AWB Number
			        	String barcode39AWB=inputString.substring(790, 802);
			        	Path barcode39PathAWB=processedPath.resolve(barcode39AWB+".png");
			        	try{
			        		generateCode39BarcodeImage(barcode39AWB, barcode39PathAWB);
			        		
			        	}
			        	catch(Exception e) {
			        	    e.printStackTrace();
			        	    String errorMessage = "exception in barcode:"+barcode39AWB;
			        	    redirectAttributes.addFlashAttribute("message", errorMessage);
			        	    
			        	}
			        	 // Processing the input file DTO
		            	InputFileDto inputFileDto = inputFileProcessingService.processFile(inputString);
		        		System.out.println(inputFileDto.toString());
		        		
		        		//output Text File
		        		String output = outputFileGeneratorService.populateValue(inputFileDto);
		        		System.out.println(output);
		        		writeOutputToFile(output, outputFile);
		        		
		        		//Output Excel Mailer
		    	    	String outputExcel = outputFileGeneratorService.excelPopulateValue(inputFileDto);
		    	    	List<String> innerList = Arrays.asList(outputExcel.split("@"));
		    	    	System.out.println(innerList.toString());
		    	    	exceldata.add(innerList);
		    	    	
		    	    	//Output Excel Card Packaging
		    	    	String cardPackaging = outputFileGeneratorService.cardPackageListValue(inputFileDto);
		    	    	List<String> cardpackageList = Arrays.asList(cardPackaging.split("@"));
		    	    	System.out.println(cardpackageList.toString());
		    	    	packagingList.add(cardpackageList);
		        		
			        }
		            
		            exportToExcel(exceldata,excelFile );
		            exportToPackage(packagingList, cardPackage);
		            
		        }
		        
		        redirectAttributes.addFlashAttribute("success", "File uploaded and processed successfully!");
		        return ResponseEntity.ok().body("File uploaded and processed successfully!");
		    } catch (Exception e) {
		        e.printStackTrace();
		        String errorMessage = "Failed to upload file: ";
		        if (e.getMessage() != null && e.getMessage().contains("InvalidPathException")) {
		            errorMessage += "Invalid file path. Please upload a file with a valid name.";
		        } else {
		            errorMessage += e.getMessage();
		        }
		        return ResponseEntity.badRequest().body(errorMessage);
		    }
	        

			/* return "redirect:/upload"; */
	    
	 }
	 
	 private List<String> processFile(Path filePath, List<String> processedStrings) {
	        try (InputStream inputStream = Files.newInputStream(filePath);
	             BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {

	            String line;
	            while ((line = reader.readLine()) != null) {
	                // Map each line to a new String object and add it to the ArrayList
	                String mappedString = mapLine(line);
	                processedStrings.add(mappedString);
	            }
	        } catch (IOException e) {
	            e.printStackTrace();
	           
	            
	        }
	        
	        return processedStrings;
	        
	    }


	    private String mapLine(String line) {
	        // Perform any mapping or processing needed for each line
	        // For now, returning the line as it is
	        return line;
	    }
	    
	    private void writeOutputToFile(String output,Path outputFile) {
	        try {
	            
	            try (BufferedWriter writer = Files.newBufferedWriter(outputFile, StandardOpenOption.APPEND, StandardOpenOption.CREATE)) 
	            {
	                writer.write(output);
	                writer.newLine(); // Add a new line for each record
	            }
	         
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
	    }
	    
	    
	    private  void exportToExcel(List <List<String>> data, Path filePath) throws IOException {
	        // create workbook and sheet
	        XSSFWorkbook workbook = new XSSFWorkbook();
	        XSSFSheet sheet = workbook.createSheet("User Data");

	        // create header row
	        XSSFRow headerRow = sheet.createRow(0);
	        XSSFCellStyle headerStyle = workbook.createCellStyle();
	        XSSFFont headerFont = workbook.createFont();
	        headerFont.setBold(true);
	        headerStyle.setFont(headerFont);
	        String[] headers = {"Sr.No.", "Date", "CRN", "Courier Shipment Id", "Name", "Address1", "Address2", "Address3", "Address4", "Address5", "Pin Code", "Mob. No.", "AWB No.", "Courier service provider name","CRN BARCODE","CRN BARCODE LINK","Shipment ID Barcode","Shipment ID BARCODE LINK","AWB BARCODE","AWB BARCODE LINK"}; //Column Headers for Excel Sheet Generation
	        for (int i = 0; i < headers.length; i++) {
	            XSSFCell cell = headerRow.createCell(i);
	            cell.setCellValue(headers[i]);
	            cell.setCellStyle(headerStyle);
	        }
	        XSSFCellStyle contentStyle = workbook.createCellStyle();
	        for (int i = 0; i < data.size(); i++) {
	        	int j = 0;
	            XSSFRow row = sheet.createRow(i + 1);
	            for ( j=0; j < (headers.length)-6; j++) {
	                XSSFCell cell = row.createCell(j);
	                cell.setCellValue(data.get(i).get(j));
	                cell.setCellStyle(contentStyle);
	            }
	            XSSFCell cell =row.createCell(j);
	            String imagePath = data.get(i).get(2)+".png"; // replace with the actual path to the image file
	            Path processedPath = Paths.get(PROCESSED_DIR);
	            Path barCodeImage= processedPath.resolve(imagePath);
	            String pathvariable=barCodeImage.toString();
	            
	            InputStream barcodeInputStream = new FileInputStream(pathvariable);
	            
	            int pictureIdx = workbook.addPicture(barcodeInputStream, Workbook.PICTURE_TYPE_PNG);
	            barcodeInputStream.close();
	            CreationHelper helper = workbook.getCreationHelper();
	            Drawing drawing = sheet.createDrawingPatriarch();
	            ClientAnchor anchor = helper.createClientAnchor();
	            anchor.setCol1(headers.length - 6);
	            anchor.setRow1(i + 1);
	            anchor.setCol2(headers.length -5 );
	            anchor.setRow2(i + 2);
	            anchor.setDx1(0);
	            anchor.setDy1(0);
	 
	            anchor.setAnchorType(ClientAnchor.AnchorType.DONT_MOVE_AND_RESIZE);
	            Picture picture = drawing.createPicture(anchor, pictureIdx);
	            picture.resize(0.9 );
	           
	            XSSFCell celllink =row.createCell(++j);
	            Hyperlink hyperlink = helper.createHyperlink(HyperlinkType.DOCUMENT);
	            hyperlink.setAddress("'User Data'!O" + (i + 2));
	            celllink.setHyperlink(hyperlink);
	            celllink.setCellValue("CRN BARCODE");
	            
	            
	            
	            
	            XSSFCell cellCSI =row.createCell(++j);
	            String imagePathCSI = data.get(i).get(3)+".png"; // replace with the actual path to the image file
	            Path processedPathCSI = Paths.get(PROCESSED_DIR);
	            Path barCodeImageCSI= processedPathCSI.resolve(imagePathCSI);
	            String pathvariableCSI=barCodeImageCSI.toString();
	            
	            InputStream barcodeInputStreamCSI = new FileInputStream(pathvariableCSI);
	            int pictureIdxCSI = workbook.addPicture(barcodeInputStreamCSI, Workbook.PICTURE_TYPE_PNG);
	            barcodeInputStream.close();
	            CreationHelper helperCSI = workbook.getCreationHelper();
	            Drawing drawingCSI = sheet.createDrawingPatriarch();
	            ClientAnchor anchorCSI = helperCSI.createClientAnchor();
	            anchorCSI.setCol1(headers.length - 4);
	            anchorCSI.setRow1(i + 1);
	            anchorCSI.setCol2(headers.length -3 );
	            anchorCSI.setRow2(i + 2);
	            anchorCSI.setDx1(0);
	            anchorCSI.setDy1(0);
	 
	            anchorCSI.setAnchorType(ClientAnchor.AnchorType.DONT_MOVE_AND_RESIZE);
	            Picture pictureCSI = drawingCSI.createPicture(anchorCSI, pictureIdxCSI);
	            pictureCSI.resize(0.9 );
	            
	            XSSFCell celllinkCSI =row.createCell(++j);
	            Hyperlink hyperlinkCSI = helperCSI.createHyperlink(HyperlinkType.DOCUMENT);
	            hyperlinkCSI.setAddress("'User Data'!Q" + (i + 2));
	            celllinkCSI.setHyperlink(hyperlinkCSI);
	            celllinkCSI.setCellValue("Shipment ID");
	            
	            
	            
	            
	            XSSFCell cellAWB =row.createCell(++j);
	            String imagePathAWB = data.get(i).get(12)+".png"; // replace with the actual path to the image file
	            Path processedPathAWB = Paths.get(PROCESSED_DIR);
	            Path barCodeImageAWB= processedPathAWB.resolve(imagePathAWB);
	            String pathvariableAWB=barCodeImageAWB.toString();
	            
	            InputStream barcodeInputStreamAWB = new FileInputStream(pathvariableAWB);
	            int pictureIdxAWB = workbook.addPicture(barcodeInputStreamAWB, Workbook.PICTURE_TYPE_PNG);
	            barcodeInputStreamAWB.close();
	            CreationHelper helperAWB = workbook.getCreationHelper();
	            Drawing drawingAWB = sheet.createDrawingPatriarch();
	            ClientAnchor anchorAWB = helperAWB.createClientAnchor();
	            anchorAWB.setCol1(headers.length - 2);
	            anchorAWB.setRow1(i + 1);
	            anchorAWB.setCol2(headers.length -1 );
	            anchorAWB.setRow2(i + 2);
	            anchorAWB.setDx1(0);
	            anchorAWB.setDy1(0);
	 
	            anchorAWB.setAnchorType(ClientAnchor.AnchorType.DONT_MOVE_AND_RESIZE);
	            Picture pictureAWB = drawingAWB.createPicture(anchorAWB, pictureIdxAWB);
	            pictureAWB.resize(0.9 );
	            
	            XSSFCell celllinkAWB =row.createCell(++j);
	            Hyperlink hyperlinkAWB = helperCSI.createHyperlink(HyperlinkType.DOCUMENT);
	            hyperlinkAWB.setAddress("'User Data'!S" + (i + 2));
	            celllinkAWB.setHyperlink(hyperlinkAWB);
	            celllinkAWB.setCellValue("AWB NUMBER");
//	            
//	            CellStyle hlink_style = workbook.createCellStyle();
//	            Font hlink_font = workbook.createFont();
//	            hlink_font.setUnderline(Font.U_SINGLE);
//	            hlink_font.setColor(Font.COLOR_RED);
//	            hlink_style.setFont(hlink_font);
//	            Hyperlink link = workbook.getCreationHelper().createHyperlink(Hyperlink.LINK_DOCUMENT);
//	            link.setAddress("'Sheet1'!A" + (rowNum + 1));
//	            cellA2.setHyperlink(link);
//	            cellA2.setCellStyle(hlink_style);
//	            cellA2.setCellValue("Go to A" + (rowNum + 1));
	        }
	        for (int i = 0; i < headers.length; i++) {
	            sheet.autoSizeColumn(i);
	        }
	        
	        // save workbook to file
	        FileOutputStream fileOut = new FileOutputStream(filePath.toFile());
	        workbook.write(fileOut);
	        fileOut.close();
	        workbook.close();
	    }
	    
	    // export formula for packagelist
	    private  void exportToPackage(List <List<String>> data, Path filePath) throws IOException {
	        // create workbook and sheet
	        XSSFWorkbook workbook = new XSSFWorkbook();
	        XSSFSheet sheet = workbook.createSheet("Card Packaging List Details");

	        // create header row
	        XSSFRow headerRow = sheet.createRow(0);
	        XSSFCellStyle headerStyle = workbook.createCellStyle();
	        XSSFFont headerFont = workbook.createFont();
	        headerFont.setBold(true);
	        headerStyle.setFont(headerFont);
	        String[] headers = {"Sr.No.", "Card Number", "Customer Name"}; //Column Headers for Excel Sheet Generation
	        for (int i = 0; i < headers.length; i++) {
	            XSSFCell cell = headerRow.createCell(i);
	            cell.setCellValue(headers[i]);
	            cell.setCellStyle(headerStyle);
	        }
	        XSSFCellStyle contentStyle = workbook.createCellStyle();
	        for (int i = 0; i < data.size(); i++) {
	            XSSFRow row = sheet.createRow(i + 1);
	            for (int j = 0; j < headers.length; j++) {
	                XSSFCell cell = row.createCell(j);
	                cell.setCellValue(data.get(i).get(j));
	                cell.setCellStyle(contentStyle);
	            }	        
	        }
	        for (int i = 0; i < headers.length; i++) {
	            sheet.autoSizeColumn(i);
	        }	        
	        // save workbook to file
	        FileOutputStream fileOut = new FileOutputStream(filePath.toFile());
	        workbook.write(fileOut);
	        fileOut.close();
	        workbook.close();
	    }
	    // barcode generator
	    public static void generateCode39BarcodeImage(String barcodeText,Path file) throws Exception {
	    	Font barcodeTextFont = new Font("Monospaced", Font.PLAIN, 12);
	        Barcode barcode = BarcodeFactory.createCode39(barcodeText,false);
	        barcode.setFont(barcodeTextFont);
	        String pathline= file.toString();
	        File outfile=new File(pathline);
	        BufferedImage barcodepng= BarcodeImageHandler.getImage(barcode);
	        ImageIO.write(barcodepng, "png", outfile);
	    }
	    
	    
	    //Download - START
	    @GetMapping("/download")
	    public void download (HttpServletRequest request, HttpServletResponse response) throws IOException {
	        
	    	LocalDateTime dateform= LocalDateTime.now();
	    	DateTimeFormatter formatter = DateTimeFormatter.ofPattern("ddMMyy hhmm");
	    	
	    	String date = dateform.format(formatter);

	    	
	    	// The file to be downloaded.
	        Path file = Paths.get(PROCESSED_DIR+"//"+"Text File Output "+ date +".txt");
	        
	        // Get the media type of the file
	        String contentType = Files.probeContentType(file);
	        if (contentType == null) {
	            // Use the default media type
	            contentType = MediaType.APPLICATION_OCTET_STREAM_VALUE;
	        }
	        
	        response.setContentType(contentType);
	        // File Size
	        response.setContentLengthLong(Files.size(file));
	        /**
	            * Building the Content-Disposition header with the ContentDisposition utility class can avoid the problem of garbled downloaded file names.
	            */
	        response.setHeader(HttpHeaders.CONTENT_DISPOSITION, ContentDisposition.attachment()
	                                                                            .filename(file.getFileName().toString(), StandardCharsets.UTF_8)
	                                                                            .build()
	                                                                            .toString());
	        // Response data to the client
	        Files.copy(file, response.getOutputStream());
	        
	    }
	    //Download - END
	    
	  //Download Excel Mailer - START
	    @GetMapping("/downloadExcel")
	    public void downloadExcel (HttpServletRequest request, HttpServletResponse response) throws IOException {
	        
	    	LocalDateTime dateform= LocalDateTime.now();
	    	DateTimeFormatter formatter = DateTimeFormatter.ofPattern("ddMMyy hhmm");
	    	
	    	String date = dateform.format(formatter);
	    	
	    	// The file to be downloaded.
	        Path file = Paths.get(PROCESSED_DIR+"//"+"Welcome Mailer Excel "+ date +".xlsx");
	        
	        // Get the media type of the file
	        String contentType = Files.probeContentType(file);
	        if (contentType == null) {
	            // Use the default media type
	            contentType = MediaType.APPLICATION_OCTET_STREAM_VALUE;
	        }
	        
	        response.setContentType(contentType);
	        // File Size
	        response.setContentLengthLong(Files.size(file));
	        /**
	            * Building the Content-Disposition header with the ContentDisposition utility class can avoid the problem of garbled downloaded file names.
	            */
	        response.setHeader(HttpHeaders.CONTENT_DISPOSITION, ContentDisposition.attachment()
	                                                                            .filename(file.getFileName().toString(), StandardCharsets.UTF_8)
	                                                                            .build()
	                                                                            .toString());
	        // Response data to the client
	        Files.copy(file, response.getOutputStream());
	        
	    }
	    //Download - END
	    
	  //Download Packaging List - START
	    @GetMapping("/download-package")
	    public void downloadpackage (HttpServletRequest request, HttpServletResponse response) throws IOException {
	        
	    	LocalDateTime dateform= LocalDateTime.now();
	    	DateTimeFormatter formatter = DateTimeFormatter.ofPattern("ddMMyy hhmm");
	    	
	    	String date = dateform.format(formatter);
	    	
	    	// The file to be downloaded.
	        Path file = Paths.get(PROCESSED_DIR+"//"+"Card Packing List "+ date +".xlsx");
	        
	        // Get the media type of the file
	        String contentType = Files.probeContentType(file);
	        if (contentType == null) {
	            // Use the default media type
	            contentType = MediaType.APPLICATION_OCTET_STREAM_VALUE;
	        }
	        
	        response.setContentType(contentType);
	        // File Size
	        response.setContentLengthLong(Files.size(file));
	        /**
	            * Building the Content-Disposition header with the ContentDisposition utility class can avoid the problem of garbled downloaded file names.
	            */
	        response.setHeader(HttpHeaders.CONTENT_DISPOSITION, ContentDisposition.attachment()
	                                                                            .filename(file.getFileName().toString(), StandardCharsets.UTF_8)
	                                                                            .build()
	                                                                            .toString());
	        // Response data to the client
	        Files.copy(file, response.getOutputStream());
	        
	    }
	    //Download - END
	    
}
